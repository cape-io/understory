// Generated by CoffeeScript 1.6.3
var should, understory;

should = require('chai').should();

understory = require('../understory');

describe('understory', function() {
  describe('#rm_prefix', function() {
    it('Removes a string from the left of another. Removes leading slash by default.', function() {
      return understory.rm_prefix('/some/long/path', '/some').should.equal('long/path');
    });
    return it('Only remove subject string. Not leading slash', function() {
      return understory.rm_prefix('/some/long/path', '/some', false).should.equal('/long/path');
    });
  });
  describe('#string_replace', function() {
    it('Replaces based regex.', function() {
      var info;
      info = {
        string: "Pique'",
        regex: "e'$",
        replace: 'é'
      };
      return understory.string_replace(info).should.equal('Piqué');
    });
    return it('Replaces based on `find` and `replace` props. Upper case before replace.', function() {
      var info;
      info = {
        toUpperCase: true,
        string: "jungle book",
        find: "BOOK",
        replace: "child"
      };
      return understory.string_replace(info).should.equal('JUNGLE child');
    });
  });
  describe('#last_dash', function() {
    return it('Return part of string after the last dash (-).', function() {
      var str;
      str = 'some-long-string-last-fun';
      return understory.last_dash(str).should.equal('fun');
    });
  });
  describe('#token_replace', function() {
    var value_obj;
    value_obj = {
      action: 'DANCE!',
      me: 'someone'
    };
    it('Does a mustache replace on a string.', function() {
      var template_str, token_rep;
      template_str = 'Kai is to {{action}}';
      token_rep = understory.token_replace(template_str, value_obj);
      return token_rep.should.equal('Kai is to DANCE!');
    });
    return it('Does a mustache replace on an object.', function() {
      var template_obj, token_rep;
      template_obj = {
        one: 'replace {{me}}',
        two: {
          three: 'Dance with {{me}} please.'
        }
      };
      token_rep = understory.token_replace(template_obj, value_obj);
      token_rep.one.should.equal('replace someone');
      return token_rep.two.three.should.equal('Dance with someone please.');
    });
  });
  return describe('#split', function() {
    it('Does a default split on a string on spaces.', function() {
      return understory.split('one two').should.eql(['one', 'two']);
    });
    it('When sent an object `string` is require or returns null', function() {
      var result;
      result = understory.split({
        split_on: ' '
      });
      return should.equal(result, null);
    });
    it('Return empty array as null', function() {
      var result;
      result = understory.split({
        string: 'a',
        split_on: 'a'
      });
      return should.equal(result, null);
    });
    it('When string has extra space return it as expected.', function() {
      var result;
      result = understory.split(' something  two ');
      return result.should.eql(['', 'something', '', 'two', '']);
    });
    it('Allows an object with string property. If split_on not found use split_on_sub.', function() {
      var result;
      result = understory.split({
        string: 'something , two',
        split_on: '5',
        split_on_sub: ' , '
      });
      return result.should.eql(['something', 'two']);
    });
    it('Trims each result when trim prop is truthy.', function() {
      var result;
      result = understory.split({
        string: 'something , two',
        split_on: ',',
        trim: true
      });
      return result.should.eql(['something', 'two']);
    });
    it('Returns value of single index when found.', function() {
      var result;
      result = understory.split({
        string: 'something,two',
        split_on: ',',
        index: 1
      });
      return result.should.equal('two');
    });
    return it('Returns null when no key of index is found.', function() {
      var result;
      result = understory.split({
        string: 'something,two',
        split_on: ',',
        index: 2
      });
      return should.equal(result, null);
    });
  });
});
